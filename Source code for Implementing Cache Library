import java.util.HashMap;

class Node {
	    int key;
	    int value;
	    Node next;
	    Node prev;


	    /* When we create a node , we only initialize key and value*/
        
	    public Node(int key, int value)
	    {
	        this.key=key;
	        this.value=value;
	    }
	}
    
	public class LRUCache
	{
	    /* head points to the address of the first node and tail points to the address of the last node */
        
	    Node head;
	    Node tail;
	    HashMap<Integer,Node>map=null;    // we are initializing the hashmap and cap(capacity) in a constructor
	    int cap=0;

	// In constructor , initialize capacity and create the object of hashmap

	    public LRUCache(int capacity)
	    {
	        this.cap=capacity;
	        map=new HashMap<>();
	    }

	    public int get(int key)
	    {
	        /* If key is found in a map then move it to front else return -1 */
             
             
	        if (map.containsKey(key))
	        {
	            Node node = map.get(key);
	            removeNode(node);
	            putOnTop(node);
	            return node.value;

	        }
	        return -1;

	    }

	    public void put(int key , int value)
	    {
	       /* if key is present, update its value.Then move the node to the head  */
           
	        if(map.containsKey(key)) 
            {
	            Node t = map.get(key);
	            t.value = value;          //Updating the value
	            removeNode(t);
	            putOnTop(t);
	        }
            
	        else
	        {
	            /* if maximum capacity is reached then remove
	               least accessed record
	             */
                 
	            if(map.size()>=cap)
	            {
	                map.remove(tail.key);
	                removeNode(tail);

	            }
                
	            Node node=new Node(key, value);
	            map.put(key,node);
	            putOnTop(node);
	        }
	    }
        
	         private void removeNode(Node node)
	         {
	             Node prevNode=node.prev;
	             Node nextNode = node.next;
	             if (prevNode!=null)
                 
	             {
	                 prevNode.next=node.next;

	             }
	             else
	             {
	                 head=nextNode;

	             }
                 
	             if(nextNode!=null)
	             {
	                 nextNode.prev=prevNode;

	             }
	             else
	             {
	                 tail=prevNode;

	             }
	         }
	              private void putOnTop(Node node)
	              {
	                  node.next=head;
	                  node.prev=null;
                      
	                  if(head!=null)
	                  {
	                      head.prev=node;
	                      head=node;
	                      if(tail==null)
	                      {
	                          tail=node;

	                      }
	                  }
	              }
	                      public static void main(String args[])
	                  
	                  {
	                     LRUCache cache=new LRUCache(3);

	                     cache.put(1,3);
	                     cache.put(4,2);
	                      System.out.println(cache.get(1));  // returns 3
	                      cache.put(5,6);
	                      System.out.println(cache.get(7));  // returns -1 (not found)
	                      System.out.println(cache.get(5));  // returns 6
	                      cache.put(7,4);                    // evicts key 4
	                      System.out.println(cache.get(4));  // returns -1 ( not found)
	                      System.out.println(cache.get(1));
	                      System.out.println(cache.get(5));

	                  }
	              


	}
	
	


